#!/bin/sh

NULLFS="/usr/pbi/.mount_nullfs"

is_mounted() {
   if [ ! -d "${1}" ] ; then return 1; fi
   # Slow down the pace of nullfs mounts, this seems to fix the odd panic / hang
   sleep 0.1
   mount | grep -q "on ${1} (" 
   return $?
}

check_pbidir() {
  if [ -d "${1}/pbimeta" ] ; then return ; fi
  echo "Error: Invalid PBI: ${1}"
  exit 1
}

get_pdir() {
  pDir="${1}"
  if [ ! -d "${pDir}/virtbase" ] ; then
    mkdir -p ${pDir}/virtbase
  fi
  if [ ! -d "${pDir}/run" ] ; then
    mkdir -p ${pDir}/run
  fi
}

mount_pbifile() {
   if [ ! -d "$pDir" ] ; then 
      mkdir -p "${pDir}"
   else
      # Check to see if it is already mounted
      mount | grep -q "on ${pDir} (ufs,"
      if [ $? -eq 0 ] ; then return; fi
   fi
   MD=`mdconfig -a -t vnode -f ${1}`
   mount -r -t ufs /dev/${MD}.uzip "${pDir}"
}

mount_dirs() {

   # Check some of the common items to mount into the PBI container
   is_mounted "${pDir}/virtbase" || $NULLFS / "${pDir}/virtbase"
   is_mounted "${pDir}/virtbase/dev" || mount -t devfs devfs "${pDir}/virtbase/dev"
   is_mounted "${pDir}/virtbase/usr/local" || $NULLFS ${1}/local "${pDir}/virtbase/usr/local"
   is_mounted "${pDir}/virtbase/var/run" || $NULLFS ${pDir}/run "${pDir}/virtbase/var/run"
   is_mounted "${pDir}/virtbase/compat/linux" || $NULLFS ${1}/linux "${pDir}/virtbase/compat/linux"

   # Sort out the items to mount into the PBI container
   for i in `mount | grep -e "(zfs" -e "(smbfs" -e "(nfs" -e "(ufs" -e "(msdos" -e "(ntfs" | grep -e "on /" | grep -v "/usr/jails" | grep -v "/usr/pbi" | grep -v "/usr/local" | awk '{print $3}'`
   do
     if [ "$i" = "/" ] ; then continue ; fi
     is_mounted "${pDir}/virtbase${i}" || $NULLFS ${i} "${pDir}/virtbase${i}"
   done

   # Mount any system-wide fonts / cursors / icons into the PBI container
   if [ -d "${pDir}/virtbase/usr/local/etc/fonts" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/etc/fonts" || $NULLFS /usr/local/etc/fonts "${pDir}/virtbase/usr/local/etc/fonts"
   fi
   if [ -d "${pDir}/virtbase/usr/local/lib/X11/fonts" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/lib/X11/fonts" || $NULLFS /usr/local/lib/X11/fonts "${pDir}/virtbase/usr/local/lib/X11/fonts"
   fi
   if [ -d "${pDir}/virtbase/usr/local/lib/X11/icons" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/lib/X11/icons" || $NULLFS /usr/local/lib/X11/icons "${pDir}/virtbase/usr/local/lib/X11/icons"
   fi

   # Check if we need to mount linprocfs in the PBI container
   if [ -d "${pDir}/virtbase/compat/linux/proc" ] ; then
      is_mounted "${pDir}/virtbase/compat/linux/proc" || mount -t linprocfs linproc "${pDir}/virtbase/compat/linux/proc"
   fi

   sync

   # Copy over the system command
   cp /usr/pbi/.pbisyscmd "${pDir}/virtbase/usr/local/bin/pbisyscmd"
   cp /usr/pbi/.pbisyscmd "${pDir}/virtbase/usr/local/bin/openwith"
   cp /usr/pbi/.pbisyscmd "${pDir}/virtbase/usr/local/bin/xdg-open"
   chmod 755 "${pDir}/virtbase/usr/local/bin/pbisyscmd" 

   # Copy the custom ldconfig
   cp /usr/pbi/.ldconfig "${pDir}/virtbase/var/run/ldconfig"
   chroot "${pDir}/virtbase" /var/run/ldconfig start >/dev/null 2>/dev/null
   sleep 0.2
   sync
}

umount_pbidir() {
   for i in `mount | grep "on ${pDir}" | tail -r | awk '{print $3}'`
   do
     #echo "Unmounting ${i}"
     umount -f ${i}
     sleep 0.1
   done
}


# Doing an unmount?
if [ "$1" = "umount" ] ; then
   get_pdir "$2"
   umount_pbidir "$2"
   exit 0
fi

if [ -z "$1" -o -z "$2" ] ; then
   echo "Missing args: mountdir / pbidir"
   exit 1
fi

MNTBASEDIR="`dirname $2`"

if [ ! -d "$MNTBASEDIR" ] ; then
   mkdir -p ${MNTBASEDIR}
   echo "Do not manually remove this directory!" > ${MNTBASEDIR}/DONOTDELETE
fi

# Lets begin the mount process
get_pdir "$1"
check_pbidir "${2}"
mount_dirs "${2}"
