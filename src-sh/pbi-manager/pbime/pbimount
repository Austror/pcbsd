#!/bin/sh

MNTLOCK="/usr/pbi/.mntLock"
MNTSLEEP="sleep 0.5"

# Grab list of current mounted file-systems
mntOutput="`mount`"

is_mounted() {
   if [ ! -d "${1}" ] ; then return 1; fi
   echo ${mntOutput} | grep -q "on ${1} ("
   return $?
}

check_pbidir() {
  if [ -d "${1}/pbimeta" ] ; then return ; fi
  echo "Error: Invalid PBI: ${1}"
  exit 1
}

get_pdir() {
  pDir="${1}"
  if [ ! -d "${pDir}/virtbase" ] ; then
    mkdir -p ${pDir}/virtbase
  fi
  if [ ! -d "${pDir}/run" ] ; then
    mkdir -p ${pDir}/run
  fi
}

mount_pbifile() {
   if [ ! -d "$pDir" ] ; then 
      mkdir -p "${pDir}"
   else
      # Check to see if it is already mounted
      mount | grep -q "on ${pDir} (ufs,"
      if [ $? -eq 0 ] ; then return; fi
   fi
   MD=`mdconfig -a -t vnode -f ${1}`
   mount -r -t ufs /dev/${MD}.uzip "${pDir}"
}

check_nvidia_linux()
{
   # Check if this PBI even has a linux compat layer with GL support
   if [ ! -d "${1}/linux/usr/lib" ] ; then return; fi
   ls ${1}/linux/usr/lib/libGL* 2>/dev/null >/dev/null
   if [ $? -ne 0 ] ; then return ; fi

   # Ok, we have linux compat in the PBI, is the system using nvidia?
   pkg info -e nvidia-driver
   if [ $? -ne 0 ] ; then return ; fi

   # We have nvidia, lets do our linux lib population now
   for i in `pkg info -l nvidia-driver 2>/dev/null | grep 'compat/linux/usr/lib' | awk '{print $1}'`
   do
      cp ${i} ${1}/linux/usr/lib/
   done
}

do_mount_lock() {

   # At this point we have waited 15 seconds, if another mount still hasn't finished
   # by now then there are other serious problems
   if [ $1 -gt 10 ] ; then
      exit 1
   fi

   # Check if we have another mount going now
   if [ -e "${MNTLOCK}" ] ; then
      pgrep -qF ${MNTLOCK} 2>/dev/null
      if [ $? -ne 0 ] ; then
         # Expired run it seems
         rm -f ${MNTLOCK} 2>/dev/null
      else
	 # Another mount is running, wait a bit for it to finish
	 sleep 1.5
	 do_mount_lock "`expr $1 + 1`"
	 return
      fi
   fi

   echo "$$" > ${MNTLOCK}
}

undo_mount_lock() {
  rm -f ${MNTLOCK} >/dev/null 2>/dev/null
}

mount_dirs() {

   # Mount our FUSE file-system
   /usr/pbi/.pbifs ${1} ${pDir}/run ${pDir}/virtbase

   # Can't get rid of these nullfs / devfs mounts, needed for unix sockets to work
   is_mounted "${pDir}/virtbase/dev" || mount -t devfs devfs "${pDir}/virtbase/dev"
   is_mounted "${pDir}/virtbase/tmp" || mount_nullfs /tmp "${pDir}/virtbase/tmp"

   # Check if we need to enable nvidia support for linux
   check_nvidia_linux "$1"

   # Start the ldconfig run
   chroot "${pDir}/virtbase" /etc/rc.d/ldconfig start >/dev/null 2>/dev/null

   # Start devfs to ensure /dev/* get proper permissions
   chroot "${pDir}/virtbase" /etc/rc.d/devfs start >/dev/null 2>/dev/null
}

umount_pbidir() {
   for i in `mount | grep "on ${pDir}/virtbase" | tail -r | awk '{print $3}'`
   do
     #echo "Unmounting ${i}"
     umount ${i}
     sleep 0.5
   done
}


# Doing an unmount?
if [ "$1" = "umount" ] ; then
   get_pdir "$2"
   umount_pbidir "$2"
   exit 0
fi

if [ -z "$1" -o -z "$2" ] ; then
   echo "Missing args: mountdir / pbidir"
   exit 1
fi

MNTBASEDIR="`dirname $2`"

if [ ! -d "$MNTBASEDIR" ] ; then
   mkdir -p ${MNTBASEDIR}
   echo "Do not manually remove this directory!" > ${MNTBASEDIR}/DONOTDELETE
fi

# Lets begin the mount process
get_pdir "$1"
check_pbidir "${2}"
mount_dirs "${2}"
