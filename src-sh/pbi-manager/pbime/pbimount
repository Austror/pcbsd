#!/bin/sh

NULLFS="/usr/pbi/.mount_nullfs"
MNTLOCK="/usr/pbi/.mntLock"
MNTSLEEP="sleep 0.3"

# Grab list of current mounted file-systems
mntOutput="`mount`"

is_mounted() {
   if [ ! -d "${1}" ] ; then return 1; fi
   echo ${mntOutput} | grep -q "on ${1} ("
   return $?
}

check_pbidir() {
  if [ -d "${1}/pbimeta" ] ; then return ; fi
  echo "Error: Invalid PBI: ${1}"
  exit 1
}

get_pdir() {
  pDir="${1}"
  if [ ! -d "${pDir}/virtbase" ] ; then
    mkdir -p ${pDir}/virtbase
  fi
  if [ ! -d "${pDir}/run" ] ; then
    mkdir -p ${pDir}/run
  fi
}

mount_pbifile() {
   if [ ! -d "$pDir" ] ; then 
      mkdir -p "${pDir}"
   else
      # Check to see if it is already mounted
      mount | grep -q "on ${pDir} (ufs,"
      if [ $? -eq 0 ] ; then return; fi
   fi
   MD=`mdconfig -a -t vnode -f ${1}`
   mount -r -t ufs /dev/${MD}.uzip "${pDir}"
}

check_nvidia_linux()
{
   # Check if this PBI even has a linux compat layer with GL support
   if [ ! -d "${1}/linux/usr/lib" ] ; then return; fi
   ls ${1}/linux/usr/lib/libGL* 2>/dev/null >/dev/null
   if [ $? -ne 0 ] ; then return ; fi

   # Ok, we have linux compat in the PBI, is the system using nvidia?
   pkg info -e nvidia-driver
   if [ $? -ne 0 ] ; then return ; fi

   # We have nvidia, lets do our linux lib population now
   for i in `pkg info -l nvidia-driver 2>/dev/null | grep 'compat/linux/usr/lib' | awk '{print $1}'`
   do
      cp ${i} ${1}/linux/usr/lib/
   done
}

do_mount_lock() {

   # At this point we have waited 15 seconds, if another mount still hasn't finished
   # by now then there are other serious problems
   if [ $1 -gt 10 ] ; then
      exit 1
   fi

   # Check if we have another mount going now
   if [ -e "${MNTLOCK}" ] ; then
      pgrep -qF ${MNTLOCK} 2>/dev/null
      if [ $? -ne 0 ] ; then
         # Expired run it seems
         rm -f ${MNTLOCK} 2>/dev/null
      else
	 # Another mount is running, wait a bit for it to finish
	 sleep 1.5
	 do_mount_lock "`expr $1 + 1`"
	 return
      fi
   fi

   echo "$$" > ${MNTLOCK}
}

undo_mount_lock() {
  rm -f ${MNTLOCK} >/dev/null 2>/dev/null
}

mount_dirs() {

   do_mount_lock "1"

   # Check some of the common items to mount into the PBI container
   is_mounted "${pDir}/virtbase" || ( $NULLFS / "${pDir}/virtbase" ; $MNTSLEEP ; check_nvidia_linux "${1}" )

   is_mounted "${pDir}/virtbase/dev" || (mount -t devfs devfs "${pDir}/virtbase/dev" ; $MNTSLEEP )
   is_mounted "${pDir}/virtbase/usr/local" || ($NULLFS ${1}/local "${pDir}/virtbase/usr/local" ; $MNTSLEEP )
   is_mounted "${pDir}/virtbase/var/run" || ($NULLFS ${pDir}/run "${pDir}/virtbase/var/run" ; $MNTSLEEP )
   if [ -d "/var/run/dbus" ] ; then
     is_mounted "${pDir}/virtbase/var/run/dbus" || ( mkdir ${pDir}/virtbase/var/run/dbus 2>/dev/null ; $NULLFS /var/run/dbus "${pDir}/virtbase/var/run/dbus" ; $MNTSLEEP )
   fi

   # If the host has Linux compat
   if [ -d "${pDir}/virtbase/compat/linux" ] ; then
     is_mounted "${pDir}/virtbase/compat/linux" || ($NULLFS ${1}/linux "${pDir}/virtbase/compat/linux" ; $MNTSLEEP )
   fi

   # Sort out the items to mount into the PBI container
   for i in `mount | grep -e "(zfs" -e "(smbfs" -e "(nfs" -e "(ufs" -e "(msdos" -e "(ntfs" -e "(fusefs" | grep -e "on /" | grep -v "/usr/jails" | grep -v "/usr/pbi" | grep -v "/usr/local" | awk '{print $3}'`
   do
     if [ "$i" = "/" ] ; then continue ; fi
     is_mounted "${pDir}/virtbase${i}" || ($NULLFS ${i} "${pDir}/virtbase${i}" ; $MNTSLEEP )
   done

   # Mount any system-wide fonts / cursors / icons into the PBI container
   if [ -d "${pDir}/virtbase/usr/local/etc/fonts" -a -d "/usr/local/etc/fonts" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/etc/fonts" || ($NULLFS /usr/local/etc/fonts "${pDir}/virtbase/usr/local/etc/fonts" ; $MNTSLEEP )
   fi
   if [ -d "${pDir}/virtbase/usr/local/lib/X11/fonts" -a -d "/usr/local/lib/X11/fonts" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/lib/X11/fonts" || ($NULLFS /usr/local/lib/X11/fonts "${pDir}/virtbase/usr/local/lib/X11/fonts" ; $MNTSLEEP )
   fi
   if [ -d "${pDir}/virtbase/usr/local/lib/X11/icons" -a -d "/usr/local/lib/X11/icons" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/lib/X11/icons" || ($NULLFS /usr/local/lib/X11/icons "${pDir}/virtbase/usr/local/lib/X11/icons" ; $MNTSLEEP )
   fi
   if [ -d "${pDir}/virtbase/usr/local/share/icons" -a -d "/usr/local/share/icons" ] ; then
      is_mounted "${pDir}/virtbase/usr/local/share/icons" || ($NULLFS /usr/local/share/icons "${pDir}/virtbase/usr/local/share/icons" ; $MNTSLEEP )
   fi

   # Check if we need to mount linprocfs in the PBI container
   if [ -d "${pDir}/virtbase/compat/linux/proc" ] ; then
      is_mounted "${pDir}/virtbase/compat/linux/proc" || (mount -t linprocfs linproc "${pDir}/virtbase/compat/linux/proc" ; $MNTSLEEP )
   fi

   undo_mount_lock

   sleep 0.2
   sync

   # Copy over the system command
   cp /usr/pbi/.pbisyscmd "${pDir}/virtbase/usr/local/bin/pbisyscmd"
   cp /usr/pbi/.pbisyscmd "${pDir}/virtbase/usr/local/bin/openwith"
   cp /usr/pbi/.pbisyscmd "${pDir}/virtbase/usr/local/bin/xdg-open"
   chmod 755 "${pDir}/virtbase/usr/local/bin/pbisyscmd" 

   # Copy the custom ldconfig
   cp /usr/pbi/.ldconfig "${pDir}/virtbase/var/run/ldconfig"
   chroot "${pDir}/virtbase" /var/run/ldconfig start >/dev/null 2>/dev/null

   # Start devfs to ensure /dev/* get proper permissions
   chroot "${pDir}/virtbase" /etc/rc.d/devfs start >/dev/null 2>/dev/null

   sync
}

umount_pbidir() {
   for i in `mount | grep "on ${pDir}" | tail -r | awk '{print $3}'`
   do
     #echo "Unmounting ${i}"
     umount -f ${i}
     sleep 0.1
   done
}


# Doing an unmount?
if [ "$1" = "umount" ] ; then
   get_pdir "$2"
   umount_pbidir "$2"
   exit 0
fi

if [ -z "$1" -o -z "$2" ] ; then
   echo "Missing args: mountdir / pbidir"
   exit 1
fi

MNTBASEDIR="`dirname $2`"

if [ ! -d "$MNTBASEDIR" ] ; then
   mkdir -p ${MNTBASEDIR}
   echo "Do not manually remove this directory!" > ${MNTBASEDIR}/DONOTDELETE
fi

# Lets begin the mount process
get_pdir "$1"
check_pbidir "${2}"
mount_dirs "${2}"
