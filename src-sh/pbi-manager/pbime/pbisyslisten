#!/bin/sh

if [ -z "$PBI_SYSPIPE" ] ; then exit 1; fi

# Run the listener daemon loop, this will keep an ear on PBI_SYSPIPE
# in case the PBI wants / needs to run a system command outside its container
while :
do
   line="`cat ${PBI_SYSPIPE}`"
   echo $line | grep -q "^CLOSE:"
   if [ $? -eq 0 ]; then break; fi

   echo $line | grep -q "^EXEC:"
   if [ $? -eq 0 ]; then 
      RETURNPIPE="`echo $line | cut -d ' ' -f 2`"
      CMD="`echo $line | cut -d ' ' -f 3-`"

      # Run the system command, sending output back to client

      # This is ugly, I know, but it works to preserve those pesky quotes on the command-line
      CMDFILE=`mktemp "/tmp/.pbi-cmd-XXXXXXXXXXXXXXXX"`
      if [ ! -e "$CMDFILE" ] ; then continue ; fi

      # Create / run the command now
      echo "$CMD 2>&1 >${RETURNPIPE} ; exit \$?" > $CMDFILE
      sh $CMDFILE
      err=$?
      rm $CMDFILE

      # Let the client know the app has finished
      echo "CLOSE: $err" > ${RETURNPIPE}
   fi
done

exit 0
