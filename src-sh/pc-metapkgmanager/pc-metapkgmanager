#!/bin/sh
#
# Copyright 2013 Kris Moore (iXsystems)
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# Source our functions
. /usr/local/share/pcbsd/scripts/functions.sh

# Define some defaults
DBDIR="/usr/local/share/pcbsd/metaset"
LOGFILE="/tmp/.pc-metapkgmanager.log"
FTP_PASSIVE_MODE="YES" ; export FTP_PASSIVE_MODE
PACKAGESUFFIX=".txz" ; export PACKAGESUFFIX
ARCH="`uname -m`"

# Start by sourcing /etc/profile
# This grabs any HTTP_ / FTP_ PROXY variables
. /etc/profile

# Fix some pkgs bugging us with license questions
PACKAGE_BUILDING=yes
export PACKAGE_BUILDING

# Trigger File for Tray Application
TRIGGERFILE="/tmp/.sysupdatetraytrigger"

display_usage() {
        cat <<EOF
usage: `basename $0` [options]
   
Options:
  add pkg1,pkg2		 -- Add the specified list of meta-packages
  del pkg1,pkg2	  	 -- Delete the specified list of meta-packages
  list     	         -- List the available meta-packages
  status <pkg>    	 -- List the status of the specified meta-packages
  --pkgset <pkgset>	 -- Change default pkgset we are using

EOF
        exit 1
}

add_metapkgs() {
	if [ -z "$1" ] ; then exit_err "No meta-pkg specified!" ; fi
	if [ ! -e "${MPDIR}/${1}/ports-list" ] ; then exit_err "No such meta-pkg: $1" ; fi
        local pkgName="`cat ${MPDIR}/$1/ports-list | cut -d ':' -f 1`"
	if [ -z "$pkgName" ] ; then exit_err "No FreeBSD package specified for meta-pkg: ${1}" ; fi

	_apkg=$1
	echo "Installing Meta-Package: $_apkg ($pkgName)"

	# If a pre-install script, run it now
	if [ -e "${MPDIR}/${_apkg}/pre-install.sh" ] ; then
	  sh ${MPDIR}/${_apkg}/pre-install.sh >/dev/null 2>/dev/null
	fi

        # Lets pre-download all packages
        download_cache_packages "pkg-static install -U -n $pkgName"

	# Lets check for any conflicts doing this install
	check_pkg_conflicts "install -U -F -y $pkgName"
	if [ $? -ne 0 ] ; then
     		exit 1
  	fi

        # Time to run pkgng and let it install packages!
	pkg install -yUf "$pkgName"

	# Make sure the program appears fully installed now, if not set error
	stat_metapkg ${_apkg}
	if [ "$?" != "0" ] ; then _pkgStatus=1 ; fi

	# Apply our PC-BSD specific xdg menu entry files
	if [ -e "/usr/local/bin/pc-xdgutil" ] ; then
	  /usr/local/bin/pc-xdgutil updatemenu >>${LOGFILE} 2>>${LOGFILE}
	fi

	# Hack to ensure that we share cursors / icons between linux / FBSD apps
	if [ ! -h "/compat/linux/usr/share/icons" ] ; then
	   rm -rf /compat/linux/usr/share/icons 2>/dev/null
	   ln -fs /usr/local/lib/X11/icons /compat/linux/usr/share/icons 2>/dev/null
	fi
	if [ ! -h "/compat/linux/usr/share/fonts" ] ; then
	   rm -rf /compat/linux/usr/share/fonts 2>/dev/null 
	   ln -fs /usr/local/lib/X11/fonts /compat/linux/usr/share/fonts 2>/dev/null
	fi

	# If a post-install script, run it now
	if [ -e "${MPDIR}/${_apkg}/post-install.sh" ] ; then
	  sh ${MPDIR}/${_apkg}/post-install.sh >/dev/null 2>/dev/null
	fi

	# Prune any port files we dont want
	# Extract custom files
        pc-extractoverlay ports

	echo "Finished Meta-Package: $_apkg"
	
}

# Delete specified meta-pkg, and packages which it installed that are not used elsewhere
del_metapkgs() {
	if [ -z "$1" ] ; then exit_err "No meta-pkg specified!" ; fi
	if [ ! -e "${MPDIR}/${1}/ports-list" ] ; then exit_err "No such meta-pkg: $1" ; fi
        local rmPkg="`cat ${MPDIR}/$1/ports-list | cut -d ':' -f 1`"
	if [ -z "$rmPkg" ] ; then exit_err "No FreeBSD package specified for meta-pkg: ${1}" ; fi
	_dpkg=$1
	kPkgs=""

	echo "Removing Meta-Package: $_dpkg"

	# kPkgs is our list of packages which are required by other installed meta-pkgs
	export kPkgs

	# If a pre-remove script, run it now
	if [ -e "${MPDIR}/${_dpkg}/pre-remove.sh" ] ; then
	  sh ${MPDIR}/${_dpkg}/pre-remove.sh >/dev/null 2>/dev/null
	fi

	# Make sure this pkg is installed
	pkg info -e $rmPkg >/dev/null 2>/dev/null
	if [ $? -ne 0 ] ; then 
		echo "Already uninstalled: ${rmPkg}" 
		echo "Already uninstalled: ${rmPkg}" >>${LOGFILE}
		return
	fi

	# confirm this package isn't required by any others
	nbrequired=`pkg query "%?r" ${rmPkg}`
	if [ $nbrequired -ne 0 ] ; then 
		# Still in use, we will re-scan it at the end
		echo "The package: ${rmPkg} is required by other packages: $nbrequired" 
		echo "The package: ${rmPkg} is required by other packages: $nbrequired" >>${LOGFILE}
		return
	fi

	# Now we use pkgng and remove it
	echo "Removing: ${rmPkg}"
	echo "Removing: ${rmPkg}" >>${LOGFILE}
	pkg delete -y ${rmPkg} >>${LOGFILE} 2>>${LOGFILE}

	# If the program is still fully installed, set status to error
	stat_metapkg ${_dpkg}
	if [ $? -eq 0 ] ; then _pkgStatus=1 ; fi

	# If a post-remove script, run it now
	if [ -e "${MPDIR}/${_dpkg}/post-remove.sh" ] ; then
	  sh ${MPDIR}/${_dpkg}/post-remove.sh >/dev/null 2>/dev/null
	fi

}

# Function to list available metapkgs
list_metapkgs() {
	if [ ! -d "${MPDIR}" ] ; then exit_err "No available meta-pkg dir" ; fi

	# Start listing each meta-pkg
	for i in `find ${MPDIR}/* -type d`
	do
		# Is this package ignored on this arch?
		if [ -e "${i}/ignore-arch" ] ; then
			if [ `cat ${i}/ignore-arch` = "$ARCH" ] ; then continue; fi
		fi

		if [ -e "${i}/pkg-desc" ] ; then

			echo "Meta Package: `basename ${i}`"
			echo "-------------------------------------"
			echo "Description: `cat ${i}/pkg-desc`"
			if [ -e "${i}/pkg-icon.png" ] ; then
				echo "Icon: ${i}/pkg-icon.png"
			fi
			if [ -e "${i}/pkg-parent" ] ; then
				echo "Parent: `cat ${i}/pkg-parent`"
			fi
			if [ -e "${i}/desktop" ] ; then
				echo "Desktop: YES"
			else
				echo "Desktop: NO"
			fi
			echo " "
			if [ -e "${i}/ports-list" ] ; then
				echo "Required Packages:"
				cat ${i}/ports-list | cut -d ':' -f 1
			else
				echo "Category Entry"
			fi
			echo " "
		fi
	done

}

# Check on a meta-pkg, see if its installed, partially installed, or not. 
stat_metapkg() {
	if [ -z "$1" ] ; then exit_err "No meta-pkg specified!" ; fi
	if [ ! -e "${MPDIR}/${1}/ports-list" ] ; then exit_err "No such meta-pkg: $1" ; fi
        local myPkg="`cat ${MPDIR}/$1/ports-list | cut -d ':' -f 1`"
	if [ -z "$myPkg" ] ; then exit_err "No FreeBSD package specified for meta-pkg: ${1}" ; fi
	_mpkg=$1

	# Parse pkg db to see if pkgs are installed
	pkg query "%n" | grep -q "^$myPkg"
	if [ $? -eq 0 ] ; then
		echo "The meta-pkg $_mpkg is installed"
		return 0
	else
		echo "The meta-pkg $_mpkg is not installed"
		return 255
	fi

}

# Read through comma delimited list of meta-pkgs
parse_metapkgs() {

	if [ "$2" != "add" -a "$2" != "del" ] ; then
		exit_err "Internal error, must use add/del for parse_metapkgs"
	fi

	create_logfile

	get_num_pkgs "$1"
	echo "Pending Meta-Package changes: $VAL"
	echo "Pending Meta-Package changes: $VAL" >>${LOGFILE}

	# Set the package add exit status to default of 0
	_pkgStatus=0

 	local list
	list=`echo "$1" | sed 's|,| |g'`	
	for z in $list
	do
		if [ "$2" = "add" ] ; then add_metapkgs "$z" "$3" ; fi
		if [ "$2" = "del" ] ; then del_metapkgs "$z" ; fi
	done

	# Update the mime data
	xdg-update-defaults >/dev/null 2>/dev/null

	echo "Meta-Package changes finished!"
	exit "$_pkgStatus"

}


# Get the number of packages we are working on
get_num_pkgs() {
        VAL=`echo $1 | sed 's|,| |g' | wc -w | tr -d ' '`
}

# Create the logfile
create_logfile() {
	if [ -e "${LOGFILE}" ]; then
		# Rotate the log file if over 5 MB
 		if [ `du -m ${LOGFILE} | awk '{print $1}'` -gt 5 ]; then
			rm ${LOGFILE}
		fi
	fi
	touch ${LOGFILE}
	chmod 666 ${LOGFILE}
}

intercept_pkg_dl()
{
   local count=0;
   fullopts="$@"
   op="$1"
   
   # Make sure we insert some flags we need
   while [ $# -gt 0 ]; do
     if [ $count -gt 0 ] ; then
        # If we are already using -n, we can skip downloading anything
	if [ "$1" = "-n" ] ; then
           pkg $fullopts
           exit $?
	fi
        flags="$flags $1"
     else
        flags="-U -n"
     fi
     count=`expr $count + 1`
     shift
   done

   # Lets pre-download all packages
   download_cache_packages "pkg $op $flags"

   # Time to run pkgng and let it do its thing
   pkg $fullopts 
   result=$?

   # Nobody likes a litter bug
   if [ $result -eq 0 -a -d "${PKG_CACHEDIR}/All" ] ; then
      echo -e "Cleaning up cache files..\c"
      rm -rf "${PKG_CACHEDIR}/All"
      echo -e "Done"
   fi
   
   exit $result
}

get_file_dl()
{
   if [ "$2" = "-o" ] ; then
      dlOut="$3"
      dlPath="$4"
   else
      dlOut="`basename $2`"
      dlPath="$2"
   fi
   get_file_from_mirrors "$dlPath" "$dlOut"
   exit $?
}

# Parse the flags we are sending over to pkg
# will intercept the install / upgrade flags
# and use our internal function to download
# in a much faster method ;)
do_pc-pkg()
{
   case $1 in
 install|upgrade) intercept_pkg_dl ${@} ;;
         getfile) get_file_dl ${@} ;;
               *) pkg ${@} 
                  exit $?
                  ;;
   esac 
}

# Are we running in pc-pkg mode?
if [ `basename $0` = "pc-pkg" ] ; then
   do_pc-pkg $@
   exit 0
fi

# Unset some vars
_pkgflags=""
PKGUPDATES=""

# The default PKGSET
PKGSET="pcbsd"

# Check if we have a different dataset specified in pcbsd.conf
PCBSD_ETCCONF="/usr/local/etc/pcbsd.conf"
_pkgChk="`sed -n 's/PCBSD_METAPKGSET: //p' ${PCBSD_ETCCONF} 2>/dev/null`"
if [ -n "${_pkgChk}" ] ; then PKGSET="$_pkgChk" ; fi
MPDIR="${DBDIR}/${PKGSET}"
TMPDIR="/usr/local/tmp"

if [ $# -eq 0 ]; then display_usage; fi

# Parse ye olde cli flags
while [ $# -gt 0 ]; do
  case "$1" in
      list) list_metapkgs ; exit 0 ;;
       add) parse_metapkgs "$2" "add" "$3" ; exit 0 ;;
       del) parse_metapkgs "$2" "del" ; exit 0 ;;
    status) stat_metapkg "$2" ; exit 0 ;;
  --chroot) if [ -z "$2" ] ; then display_usage ; fi  
	    _chroot="$2" 
            if [ ! -e "${_chroot}/bin/sh" ] ; then
              echo "Invalid chroot dir: ${_chroot}"
              exit 1
	    fi
	    _pkgflags="-C ${_chroot}"
	    _chrootcmd="chroot ${_chroot}"
	    _chroottag="--chroot ${_chroot}"

	    # Check for an alternative default pkgset in this chroot
	    PCBSD_ETCCONF="${_chroot}/usr/local/etc/pcbsd.conf"
	    _pkgChk="`sed -n 's/PCBSD_METAPKGSET: //p' ${PCBSD_ETCCONF} 2>/dev/null`"
	    if [ -n "${_pkgChk}" ] ; then PKGSET="$_pkgChk" ; fi
            MPDIR="${DBDIR}/${PKGSET}"
	    shift
            ;;
  --pkgset) if [ -z "$2" ] ; then display_usage ; fi  
            PKGSET="$2" 
            if [ ! -d "${DBDIR}/$PKGSET" ] ; then
              echo "No such package set $PKGSET"
              exit 1
            fi
            MPDIR="${DBDIR}/${PKGSET}"
            shift ;;
         *) if [ -z "$1" ] ; then
	      shift
	    else
	      display_usage
	    fi 
	    ;;
  esac
  shift
done

exit 0

